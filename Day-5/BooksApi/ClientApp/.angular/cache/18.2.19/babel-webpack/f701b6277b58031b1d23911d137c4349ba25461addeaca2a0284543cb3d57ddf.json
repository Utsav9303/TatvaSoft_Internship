{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/auth.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    return this.authService.isAuthenticated().pipe(take(1), map(isAuthenticated => {\n      if (isAuthenticated) {\n        // Check if route requires admin role\n        if (route.data['requiresAdmin'] && !this.authService.isAdmin()) {\n          this.router.navigate(['/']);\n          return false;\n        }\n        return true;\n      }\n      this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }));\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","take","AuthGuard","constructor","router","authService","canActivate","route","state","isAuthenticated","pipe","data","isAdmin","navigate","queryParams","returnUrl","url","i0","ɵɵinject","i1","Router","i2","AuthService","factory","ɵfac","providedIn"],"sources":["E:\\TatvaSoft\\Day-5\\BooksApi\\ClientApp\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    return this.authService.isAuthenticated().pipe(\r\n      take(1),\r\n      map(isAuthenticated => {\r\n        if (isAuthenticated) {\r\n          // Check if route requires admin role\r\n          if (route.data['requiresAdmin'] && !this.authService.isAdmin()) {\r\n            this.router.navigate(['/']);\r\n            return false;\r\n          }\r\n          return true;\r\n        }\r\n\r\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\r\n        return false;\r\n      })\r\n    );\r\n  }\r\n} "],"mappings":"AAGA,SAASA,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAK1C,OAAM,MAAOC,SAAS;EACpBC,YACUC,MAAc,EACdC,WAAwB;IADxB,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;EAClB;EAEHC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnE,OAAO,IAAI,CAACH,WAAW,CAACI,eAAe,EAAE,CAACC,IAAI,CAC5CT,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAACS,eAAe,IAAG;MACpB,IAAIA,eAAe,EAAE;QACnB;QACA,IAAIF,KAAK,CAACI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAACN,WAAW,CAACO,OAAO,EAAE,EAAE;UAC9D,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;UAC3B,OAAO,KAAK;QACd;QACA,OAAO,IAAI;MACb;MAEA,IAAI,CAACT,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;QAAEC,WAAW,EAAE;UAAEC,SAAS,EAAEP,KAAK,CAACQ;QAAG;MAAE,CAAC,CAAC;MAC1E,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;;;uCAvBWd,SAAS,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAATpB,SAAS;MAAAqB,OAAA,EAATrB,SAAS,CAAAsB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}