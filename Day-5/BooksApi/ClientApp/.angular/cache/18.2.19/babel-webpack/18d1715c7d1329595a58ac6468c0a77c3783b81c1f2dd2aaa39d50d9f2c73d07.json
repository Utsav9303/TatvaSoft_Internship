{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'api/auth';\n    this.tokenKey = 'auth_token';\n    this.userRoleKey = 'user_role';\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    this.isAuthenticatedSubject.next(!!this.getToken());\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem(this.tokenKey, response.token);\n        this.isAuthenticatedSubject.next(true);\n        this.decodeAndStoreUserRole(response.token);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userRoleKey);\n    this.isAuthenticatedSubject.next(false);\n    this.router.navigate(['/login']);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  isAuthenticated() {\n    return this.isAuthenticatedSubject.asObservable();\n  }\n  isAdmin() {\n    return localStorage.getItem(this.userRoleKey) === 'Admin';\n  }\n  decodeAndStoreUserRole(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      localStorage.setItem(this.userRoleKey, payload.role);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","router","apiUrl","tokenKey","userRoleKey","isAuthenticatedSubject","next","getToken","login","username","password","post","pipe","response","token","localStorage","setItem","decodeAndStoreUserRole","logout","removeItem","navigate","getItem","isAuthenticated","asObservable","isAdmin","payload","JSON","parse","atob","split","role","error","console","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["E:\\TatvaSoft\\Day-5\\BooksApi\\ClientApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'api/auth';\r\n  private tokenKey = 'auth_token';\r\n  private userRoleKey = 'user_role';\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {\r\n    this.isAuthenticatedSubject.next(!!this.getToken());\r\n  }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/login`, { username, password })\r\n      .pipe(\r\n        tap(response => {\r\n          if (response.token) {\r\n            localStorage.setItem(this.tokenKey, response.token);\r\n            this.isAuthenticatedSubject.next(true);\r\n            this.decodeAndStoreUserRole(response.token);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n    localStorage.removeItem(this.userRoleKey);\r\n    this.isAuthenticatedSubject.next(false);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  isAuthenticated(): Observable<boolean> {\r\n    return this.isAuthenticatedSubject.asObservable();\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    return localStorage.getItem(this.userRoleKey) === 'Admin';\r\n  }\r\n\r\n  private decodeAndStoreUserRole(token: string): void {\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      localStorage.setItem(this.userRoleKey, payload.role);\r\n    } catch (error) {\r\n      console.error('Error decoding token:', error);\r\n    }\r\n  }\r\n} "],"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;;AAMvD,OAAM,MAAOC,WAAW;EAMtBC,YACUC,IAAgB,EAChBC,MAAc;IADd,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IAPR,KAAAC,MAAM,GAAG,UAAU;IACnB,KAAAC,QAAQ,GAAG,YAAY;IACvB,KAAAC,WAAW,GAAG,WAAW;IACzB,KAAAC,sBAAsB,GAAG,IAAIT,eAAe,CAAU,KAAK,CAAC;IAMlE,IAAI,CAACS,sBAAsB,CAACC,IAAI,CAAC,CAAC,CAAC,IAAI,CAACC,QAAQ,EAAE,CAAC;EACrD;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAM,GAAG,IAAI,CAACT,MAAM,QAAQ,EAAE;MAAEO,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACvEE,IAAI,CACHf,GAAG,CAACgB,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClBC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACb,QAAQ,EAAEU,QAAQ,CAACC,KAAK,CAAC;QACnD,IAAI,CAACT,sBAAsB,CAACC,IAAI,CAAC,IAAI,CAAC;QACtC,IAAI,CAACW,sBAAsB,CAACJ,QAAQ,CAACC,KAAK,CAAC;MAC7C;IACF,CAAC,CAAC,CACH;EACL;EAEAI,MAAMA,CAAA;IACJH,YAAY,CAACI,UAAU,CAAC,IAAI,CAAChB,QAAQ,CAAC;IACtCY,YAAY,CAACI,UAAU,CAAC,IAAI,CAACf,WAAW,CAAC;IACzC,IAAI,CAACC,sBAAsB,CAACC,IAAI,CAAC,KAAK,CAAC;IACvC,IAAI,CAACL,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAb,QAAQA,CAAA;IACN,OAAOQ,YAAY,CAACM,OAAO,CAAC,IAAI,CAAClB,QAAQ,CAAC;EAC5C;EAEAmB,eAAeA,CAAA;IACb,OAAO,IAAI,CAACjB,sBAAsB,CAACkB,YAAY,EAAE;EACnD;EAEAC,OAAOA,CAAA;IACL,OAAOT,YAAY,CAACM,OAAO,CAAC,IAAI,CAACjB,WAAW,CAAC,KAAK,OAAO;EAC3D;EAEQa,sBAAsBA,CAACH,KAAa;IAC1C,IAAI;MACF,MAAMW,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACd,KAAK,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrDd,YAAY,CAACC,OAAO,CAAC,IAAI,CAACZ,WAAW,EAAEqB,OAAO,CAACK,IAAI,CAAC;IACtD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF;;;uCApDWjC,WAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXxC,WAAW;MAAAyC,OAAA,EAAXzC,WAAW,CAAA0C,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}